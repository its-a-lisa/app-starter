// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9WWMjYs2gyQXMvMAkxbjFX
// Component: 7Zl2VIax1zjD

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import TextInput from "../../TextInput"; // plasmic-import: pvnp5CxIJaGY/component
import Button from "../../Button"; // plasmic-import: WvItauIVw1SL/component
import Divider from "../../Divider"; // plasmic-import: mpm5KeyC2_ZP/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_app_starter.module.css"; // plasmic-import: 9WWMjYs2gyQXMvMAkxbjFX/projectcss
import sty from "./PlasmicSignUpPrompt.module.css"; // plasmic-import: 7Zl2VIax1zjD/css

import SearchIcon from "./icons/PlasmicIcon__Search"; // plasmic-import: Mo4ntasHoo9g/icon
import CheckIcon from "./icons/PlasmicIcon__Check"; // plasmic-import: aAFB24W5NNY7/icon
import AppleIcon from "./icons/PlasmicIcon__Apple"; // plasmic-import: BoW0iYMM00Da/icon
import WandIcon from "./icons/PlasmicIcon__Wand"; // plasmic-import: O5bS1f_Bnf9y/icon
import Loading3SvgrepoComsvgIcon from "./icons/PlasmicIcon__Loading3SvgrepoComsvg"; // plasmic-import: y5b2FOsp-9wX/icon

createPlasmicElementProxy;

export type PlasmicSignUpPrompt__VariantMembers = {
  isSignUpFlow: "isSignUpFlow";
  isError: "isError";
  isLoading: "isLoading";
};
export type PlasmicSignUpPrompt__VariantsArgs = {
  isSignUpFlow?: SingleBooleanChoiceArg<"isSignUpFlow">;
  isError?: SingleBooleanChoiceArg<"isError">;
  isLoading?: SingleBooleanChoiceArg<"isLoading">;
};
type VariantPropType = keyof PlasmicSignUpPrompt__VariantsArgs;
export const PlasmicSignUpPrompt__VariantProps = new Array<VariantPropType>(
  "isSignUpFlow",
  "isError",
  "isLoading"
);

export type PlasmicSignUpPrompt__ArgsType = {
  children?: React.ReactNode;
};
type ArgPropType = keyof PlasmicSignUpPrompt__ArgsType;
export const PlasmicSignUpPrompt__ArgProps = new Array<ArgPropType>("children");

export type PlasmicSignUpPrompt__OverridesType = {
  root?: p.Flex<"div">;
  emailInput?: p.Flex<typeof TextInput>;
  passwordInput?: p.Flex<typeof TextInput>;
  submitButton?: p.Flex<typeof Button>;
  divider?: p.Flex<typeof Divider>;
  button?: p.Flex<typeof Button>;
};

export interface DefaultSignUpPromptProps {
  children?: React.ReactNode;
  isSignUpFlow?: SingleBooleanChoiceArg<"isSignUpFlow">;
  isError?: SingleBooleanChoiceArg<"isError">;
  isLoading?: SingleBooleanChoiceArg<"isLoading">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSignUpPrompt__RenderFunc(props: {
  variants: PlasmicSignUpPrompt__VariantsArgs;
  args: PlasmicSignUpPrompt__ArgsType;
  overrides: PlasmicSignUpPrompt__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof p.useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "emailInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "passwordInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "isSignUpFlow",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.isSignUpFlow
      },
      {
        path: "isError",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.isError
      },
      {
        path: "isLoading",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.isLoading
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox___1RnJ)}>
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__dnQtu, {
            [sty.freeBoxisError__dnQtUcZlPq]: hasVariant(
              $state,
              "isError",
              "isError"
            ),
            [sty.freeBoxisLoading__dnQtuilg0E]: hasVariant(
              $state,
              "isLoading",
              "isLoading"
            )
          })}
        >
          <div
            className={classNames(projectcss.all, sty.freeBox__sr6Mz, {
              [sty.freeBoxisError__sr6MzcZlPq]: hasVariant(
                $state,
                "isError",
                "isError"
              )
            })}
          >
            {p.renderPlasmicSlot({
              defaultContents: "Enter some text",
              value: args.children,
              className: classNames(sty.slotTargetChildren, {
                [sty.slotTargetChildrenisError]: hasVariant(
                  $state,
                  "isError",
                  "isError"
                )
              })
            })}
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__wDjE,
              {
                [sty.textisSignUpFlow__wDjEkYucq]: hasVariant(
                  $state,
                  "isSignUpFlow",
                  "isSignUpFlow"
                )
              }
            )}
          >
            {hasVariant($state, "isSignUpFlow", "isSignUpFlow")
              ? "Sign up with"
              : "Sign in with"}
          </div>
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__smW2Z)}
          >
            <TextInput
              data-plasmic-name={"emailInput"}
              data-plasmic-override={overrides.emailInput}
              className={classNames("__wab_instance", sty.emailInput)}
              onChange={(...eventArgs) => {
                p.generateStateOnChangeProp($state, ["emailInput", "value"])(
                  (e => e.target?.value).apply(null, eventArgs)
                );
              }}
              placeholder={"Email"}
              type={"email"}
              value={
                p.generateStateValueProp($state, ["emailInput", "value"]) ?? ""
              }
            />

            <TextInput
              data-plasmic-name={"passwordInput"}
              data-plasmic-override={overrides.passwordInput}
              className={classNames("__wab_instance", sty.passwordInput)}
              onChange={(...eventArgs) => {
                p.generateStateOnChangeProp($state, ["passwordInput", "value"])(
                  (e => e.target?.value).apply(null, eventArgs)
                );
              }}
              placeholder={"Password"}
              type={"password"}
              value={
                p.generateStateValueProp($state, ["passwordInput", "value"]) ??
                ""
              }
            />
          </p.Stack>
          <Button
            data-plasmic-name={"submitButton"}
            data-plasmic-override={overrides.submitButton}
            className={classNames("__wab_instance", sty.submitButton, {
              [sty.submitButtonisLoading]: hasVariant(
                $state,
                "isLoading",
                "isLoading"
              ),
              [sty.submitButtonisSignUpFlow]: hasVariant(
                $state,
                "isSignUpFlow",
                "isSignUpFlow"
              )
            })}
            color={"indigo"}
            endIcon={
              <WandIcon
                className={classNames(projectcss.all, sty.svg__bzpn)}
                role={"img"}
              />
            }
            submitsForm={true}
          >
            {hasVariant($state, "isSignUpFlow", "isSignUpFlow")
              ? "Sign up for an account"
              : "Start your account"}
          </Button>
          <Loading3SvgrepoComsvgIcon
            className={classNames(projectcss.all, sty.svg__ozq1V, {
              [sty.svgisLoading__ozq1VIlg0E]: hasVariant(
                $state,
                "isLoading",
                "isLoading"
              )
            })}
            role={"img"}
          />
        </p.Stack>
        <Divider
          data-plasmic-name={"divider"}
          data-plasmic-override={overrides.divider}
          className={classNames("__wab_instance", sty.divider)}
        />

        <div className={classNames(projectcss.all, sty.freeBox__aFykk)}>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___3Gl3D,
              {
                [sty.textisSignUpFlow___3Gl3DkYucq]: hasVariant(
                  $state,
                  "isSignUpFlow",
                  "isSignUpFlow"
                )
              }
            )}
          >
            {hasVariant($state, "isSignUpFlow", "isSignUpFlow")
              ? "Already have an account?"
              : "Don't have an account?"}
          </div>
          <Button
            data-plasmic-name={"button"}
            data-plasmic-override={overrides.button}
            className={classNames("__wab_instance", sty.button, {
              [sty.buttonisSignUpFlow]: hasVariant(
                $state,
                "isSignUpFlow",
                "isSignUpFlow"
              )
            })}
            color={"link"}
            link={
              hasVariant($state, "isSignUpFlow", "isSignUpFlow")
                ? `/login`
                : `/signup`
            }
          >
            {hasVariant($state, "isSignUpFlow", "isSignUpFlow")
              ? "Log in here"
              : "Sign up here"}
          </Button>
        </div>
      </div>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "emailInput",
    "passwordInput",
    "submitButton",
    "divider",
    "button"
  ],
  emailInput: ["emailInput"],
  passwordInput: ["passwordInput"],
  submitButton: ["submitButton"],
  divider: ["divider"],
  button: ["button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  emailInput: typeof TextInput;
  passwordInput: typeof TextInput;
  submitButton: typeof Button;
  divider: typeof Divider;
  button: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSignUpPrompt__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSignUpPrompt__VariantsArgs;
    args?: PlasmicSignUpPrompt__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSignUpPrompt__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicSignUpPrompt__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSignUpPrompt__ArgProps,
          internalVariantPropNames: PlasmicSignUpPrompt__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSignUpPrompt__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSignUpPrompt";
  } else {
    func.displayName = `PlasmicSignUpPrompt.${nodeName}`;
  }
  return func;
}

export const PlasmicSignUpPrompt = Object.assign(
  // Top-level PlasmicSignUpPrompt renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    emailInput: makeNodeComponent("emailInput"),
    passwordInput: makeNodeComponent("passwordInput"),
    submitButton: makeNodeComponent("submitButton"),
    divider: makeNodeComponent("divider"),
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicSignUpPrompt
    internalVariantProps: PlasmicSignUpPrompt__VariantProps,
    internalArgProps: PlasmicSignUpPrompt__ArgProps
  }
);

export default PlasmicSignUpPrompt;
/* prettier-ignore-end */
