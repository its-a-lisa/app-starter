// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9WWMjYs2gyQXMvMAkxbjFX
// Component: jLwULkfXhWwf

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { RichLayout } from "@plasmicpkgs/plasmic-rich-components"; // plasmic-import: FNIk-CnxQYXU/codeComponent
import { LoadingBoundary } from "@plasmicpkgs/plasmic-basic-components"; // plasmic-import: u-J0rH0B-4/codeComponent
import Button from "../../Button"; // plasmic-import: WvItauIVw1SL/component
import LogoutButton from "../../LogoutButton"; // plasmic-import: KWpY_ILPfCi6/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_app_starter.module.css"; // plasmic-import: 9WWMjYs2gyQXMvMAkxbjFX/projectcss
import sty from "./PlasmicAppLayout.module.css"; // plasmic-import: jLwULkfXhWwf/css

import AppleIcon from "./icons/PlasmicIcon__Apple"; // plasmic-import: BoW0iYMM00Da/icon

createPlasmicElementProxy;

export type PlasmicAppLayout__VariantMembers = {};
export type PlasmicAppLayout__VariantsArgs = {};
type VariantPropType = keyof PlasmicAppLayout__VariantsArgs;
export const PlasmicAppLayout__VariantProps = new Array<VariantPropType>();

export type PlasmicAppLayout__ArgsType = {
  children?: React.ReactNode;
};
type ArgPropType = keyof PlasmicAppLayout__ArgsType;
export const PlasmicAppLayout__ArgProps = new Array<ArgPropType>("children");

export type PlasmicAppLayout__OverridesType = {
  root?: p.Flex<typeof RichLayout>;
  img?: p.Flex<typeof p.PlasmicImg>;
  loadingBoundary?: p.Flex<typeof LoadingBoundary>;
  text?: p.Flex<"div">;
  section?: p.Flex<"section">;
  logoutButton?: p.Flex<typeof LogoutButton>;
};

export interface DefaultAppLayoutProps {
  children?: React.ReactNode;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicAppLayout__RenderFunc(props: {
  variants: PlasmicAppLayout__VariantsArgs;
  args: PlasmicAppLayout__ArgsType;
  overrides: PlasmicAppLayout__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  return (
    <RichLayout
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      actionsChildren={
        <LogoutButton
          data-plasmic-name={"logoutButton"}
          data-plasmic-override={overrides.logoutButton}
          className={classNames("__wab_instance", sty.logoutButton)}
        />
      }
      className={classNames(
        "__wab_instance",
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
      logoElement={
        <p.PlasmicImg
          data-plasmic-name={"img"}
          data-plasmic-override={overrides.img}
          alt={""}
          className={classNames(sty.img)}
          displayHeight={"auto"}
          displayMaxHeight={"none"}
          displayMaxWidth={"none"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"auto"}
          src={"https://static1.plasmic.app/fake-logo.svg"}
        />
      }
      navMenuItems={(() => {
        const __composite = [
          { path: "/", name: "Home" },
          { path: null, name: null }
        ];
        __composite["1"]["path"] = `/internal`;
        __composite["1"]["name"] = "Internal Space";
        return __composite;
      })()}
      title={"App title"}
    >
      <LoadingBoundary
        data-plasmic-name={"loadingBoundary"}
        data-plasmic-override={overrides.loadingBoundary}
        className={classNames("__wab_instance", sty.loadingBoundary)}
        loadingState={
          <ph.DataCtxReader>
            {$ctx => (
              <div
                data-plasmic-name={"text"}
                data-plasmic-override={overrides.text}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text
                )}
              >
                {"Loading..."}
              </div>
            )}
          </ph.DataCtxReader>
        }
      >
        <ph.DataCtxReader>
          {$ctx => (
            <section
              data-plasmic-name={"section"}
              data-plasmic-override={overrides.section}
              className={classNames(projectcss.all, sty.section)}
            >
              {p.renderPlasmicSlot({
                defaultContents: (
                  <section
                    className={classNames(projectcss.all, sty.section__odU7X)}
                  >
                    <h1
                      className={classNames(
                        projectcss.all,
                        projectcss.h1,
                        projectcss.__wab_text,
                        sty.h1__o9Ga
                      )}
                    >
                      {"You won't believe what happens next."}
                    </h1>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___7NBqq
                      )}
                    >
                      {"Enter some text"}
                    </div>
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__eXbup
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__hZuVt
                        )}
                      >
                        {"Label"}
                      </div>
                    </Button>
                  </section>
                ),
                value: args.children
              })}
            </section>
          )}
        </ph.DataCtxReader>
      </LoadingBoundary>
    </RichLayout>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "img", "loadingBoundary", "text", "section", "logoutButton"],
  img: ["img"],
  loadingBoundary: ["loadingBoundary", "text", "section"],
  text: ["text"],
  section: ["section"],
  logoutButton: ["logoutButton"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: typeof RichLayout;
  img: typeof p.PlasmicImg;
  loadingBoundary: typeof LoadingBoundary;
  text: "div";
  section: "section";
  logoutButton: typeof LogoutButton;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAppLayout__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAppLayout__VariantsArgs;
    args?: PlasmicAppLayout__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAppLayout__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicAppLayout__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicAppLayout__ArgProps,
          internalVariantPropNames: PlasmicAppLayout__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAppLayout__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAppLayout";
  } else {
    func.displayName = `PlasmicAppLayout.${nodeName}`;
  }
  return func;
}

export const PlasmicAppLayout = Object.assign(
  // Top-level PlasmicAppLayout renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    loadingBoundary: makeNodeComponent("loadingBoundary"),
    text: makeNodeComponent("text"),
    section: makeNodeComponent("section"),
    logoutButton: makeNodeComponent("logoutButton"),

    // Metadata about props expected for PlasmicAppLayout
    internalVariantProps: PlasmicAppLayout__VariantProps,
    internalArgProps: PlasmicAppLayout__ArgProps
  }
);

export default PlasmicAppLayout;
/* prettier-ignore-end */
